
@using BugBlazor.Data
@using BugBlazor.Models
@using Microsoft.AspNetCore.SignalR.Client;

@inject BugBlazor.Data.BugDb _db
@inject IJSRuntime _jsRuntime;

<button class="btn btn-primary" @onclick="CheckSelect">Check</button>
<div class="row mb-3">
    <div class="col-6">

        <div class="card">
            <div class="card-header">
                @cardTitle
            </div>
            <div class="card-body">
                <input type="text" placeholder="Name" @bind="@Bug.Name" class="form-control" />
                <br />
                <textarea placeholder="Description" @bind="@Bug.Description" class="form-control"></textarea>
                <br />
                <select class="form-control" @bind="@Bug.State">

                    <option value=@StateType.New>@StateType.New.ToString()</option>
                    <option value=@StateType.Commited>@StateType.Commited.ToString()</option>
                    <option value=@StateType.Done>@StateType.Done.ToString()</option>

                </select>
                <br />

                @if (ShowConfirmEdit)
                {
                    <button class="btn btn-primary" @onclick="ConfirmEditBug">Apply Edit</button>
                    <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="AddBug">Add</button>
                }
            </div>
        </div>
    </div>
</div>


<table class="table table-hover">
    <thead>
        <tr>
            <th>#</th>
            <th>Name</th>
            <th>Desc</th>
            <th>State</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Bugs.Count; i++)
        {
            var bug = Bugs[i];
            <tr class=@(bug.State==StateType.Done ? "table-success" : "") style="cursor:pointer" @key="bug.Id">

                <td>@(i + 1)</td>
                <td>@bug.Name</td>
                <td>@bug.Description</td>
                <td >@bug.State</td>
                <td>
                    <a class="btn btn-light" style="cursor:pointer">Details</a>
                    <a class="btn btn-danger" style="cursor:pointer" @onclick="()=>RemoveBug(bug)">Delete</a>
                    <a class="btn btn-primary" style="cursor:pointer" @onclick="()=>EditBug(bug)">Edit</a>
                </td>
            </tr>
        }

    </tbody>
</table>

@code{
    private Bug Bug = new Bug();
    bool ShowConfirmEdit;
    public int counter;
    private string cardTitle;
    private HubConnection connection;
    public IList<BugBlazor.Models.Bug> Bugs { get; set; }

    private void CheckSelect()
    {
        var selectedBug = Bugs.First(b => b.Id == 12);
        selectedBug.State = StateType.Commited;
    }

    protected override void OnInitialized()
    {
        counter = 1;
        ShowConfirmEdit = false;
        Bugs = _db.Bugs.ToList();
        cardTitle = "New Bug";

        connection = new HubConnectionBuilder()
                .WithUrl("https://localhost:5001/bughub")
                .Build();

        connection.Closed += async (error) =>
        {
            await Task.Delay(new Random().Next(0, 5) * 1000);
            await connection.StartAsync();
        };

        connection.On<Bug>("UpdateBug",  (bug) =>
        {
            Bugs = _db.Bugs.ToList();

             _jsRuntime.InvokeVoidAsync("toastr.warning", $"Bug [{bug.Name}] updated by others.");

        //var selectedBug = Bugs.FirstOrDefault(b=>b.Id==bug.Id);

        //selectedBug.Name = bug.Name;
        //selectedBug.State = bug.State;
        //selectedBug.Description = bug.Description;

        ////Bug = selectedBug;
        //Bug=Bugs.FirstOrDefault(b=>b.Id==bug.Id);
        //Bug = new Bug
        //{
        //    State = StateType.Done
        //};

        //CheckSelect();
    });

        connection.StartAsync();
    }

    private void AddBug()
    {
        if (ShowConfirmEdit)
        {
            return;
        }
        _db.Bugs.Add(Bug);
        _db.SaveChanges();

        Bugs.Add(Bug);
        Bug = new Bug();
        _jsRuntime.InvokeVoidAsync("toastr.success", "New bug added");
    }

    private async Task RemoveBug(Bug bug)
    {


        var confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            _db.Bugs.Remove(bug);
            _db.SaveChanges();

            Bugs.Remove(bug);
        }

    }

    private void EditBug(Bug bug)
    {
        ShowConfirmEdit = true;
        cardTitle = $"Edit Bug : {bug.Id}";
        Bug = bug;

    }

    private void CancelEdit()
    {
        ShowConfirmEdit = false;
        Bug = new Bug();
        cardTitle = "New Bug";
    }

    private async Task ConfirmEditBug()
    {
        _db.Bugs.Update(Bug);
        await _db.SaveChangesAsync();
        await _jsRuntime.InvokeVoidAsync("toastr.success", "Bug updated");

        await connection.InvokeAsync("NotifyEdited", Bug);

        Bug = new Bug();
        ShowConfirmEdit = false;
        cardTitle = "New bug";


    }


}