
@using BugBlazor.Data
@using BugBlazor.Models
@inject BugBlazor.Data.BugDb _db
@inject IJSRuntime JsRuntime;


<div class="row mb-3">
    <div class="col-6">
        <h3>New Bug</h3>
        <div>

            <input type="text" @bind="@Bug.Name" class="form-control" />
            <br />
            <textarea @bind="@Bug.Description" class="form-control"></textarea>
            <br />
            <select class="form-control" @bind="@Bug.State">

                <option value=@StateType.New>@StateType.New.ToString()</option>
                <option value=@StateType.Commited>@StateType.Commited.ToString()</option>
                <option value=@StateType.Done>@StateType.Done.ToString()</option>

            </select>
            <br />

            @if (ShowConfirmEdit)
            {
                <button class="btn btn-primary btn-lg" @onclick="ConfirmEditBug">Apply Edit</button>
            }
            else
            {
                <button type="submit" class="btn btn-primary btn-lg" @onclick="AddBug">Add</button>
            }


        </div>
    </div>
</div>


<table class="table table-hover">
    <thead>
        <tr>
            <th>#</th>
            <th>Id</th>
            <th>Name</th>
            <th>Desc</th>
            <th>State</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Bugs.Count; i++)
        {
            var bug = Bugs[i];
            <tr class=@(bug.State==StateType.Done ? "table-success" : "")>

                <td>@(i + 1)</td>
                <td>@bug.Id</td>
                <td>@bug.Name</td>
                <td>@bug.Description</td>
                <td>@bug.State</td>
                <td>
                    <a class="btn btn-light" style="cursor:pointer">Details</a>
                    <a class="btn btn-danger" style="cursor:pointer" @onclick="()=>RemoveBug(bug)">Delete</a>
                    <a class="btn btn-primary" style="cursor:pointer" @onclick="()=>EditBug(bug)">Edit</a>
                </td>
            </tr>
        }

    </tbody>
</table>

@code{
    private Bug Bug = new Bug();
    bool ShowConfirmEdit;
    public int counter;

    public IList<BugBlazor.Models.Bug> Bugs { get; set; }

    protected override void OnInitialized()
    {
        counter = 1;
        ShowConfirmEdit = false;
        Bugs = _db.Bugs.ToList();
    }

    private void AddBug()
    {
        if (ShowConfirmEdit)
        {
            return;
        }
        _db.Bugs.Add(Bug);
        _db.SaveChanges();

        Bugs.Add(Bug);
        Bug = new Bug();
        JsRuntime.InvokeVoidAsync("toastr.success", "New bug added");
    }

    private void RemoveBug(Bug bug)
    {
        _db.Bugs.Remove(bug);
        _db.SaveChanges();

        Bugs.Remove(bug);
    }

    private void EditBug(Bug bug)
    {
        ShowConfirmEdit = true;
        Bug = bug;
    }

    private async Task ConfirmEditBug()
    {
        _db.Bugs.Update(Bug);
        await _db.SaveChangesAsync();
        Bug = new Bug();
        ShowConfirmEdit = false;
    }


}